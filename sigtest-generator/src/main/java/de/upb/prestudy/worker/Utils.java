package de.upb.prestudy.worker;

import static java.util.stream.Collectors.groupingBy;

import de.upb.prestudy.db.model.generate.SigTestDBDoc;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
import org.slf4j.LoggerFactory;

public class Utils {
  private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(Utils.class);

  public static boolean isAutoGeneratedLambdaClass(String sootClassName) {
    final int i = sootClassName.lastIndexOf("__");
    if (i > 0
        && StringUtils.isNumeric(sootClassName.substring(i + 2))
        && sootClassName.contains("$")) {
      return true;
    }
    return false;
  }

  public static Map<Pair<String, String>, Collection<Pair<SigTestDBDoc, SigTestDBDoc>>>
      generateSemanticVersionPairsForComparison(Collection<SigTestDBDoc> sigTestDBDocs) {

    Map<Pair<String, String>, Collection<Pair<SigTestDBDoc, SigTestDBDoc>>> pairsToComparePerGA =
        new HashMap<>();

    // filter out android versions (for guava), since we don't want to compare them, and they
    // disturb
    // the base wise comparison
    Collection<SigTestDBDoc> filteredSigTestDocs =
        sigTestDBDocs.stream()
            .filter(x -> !StringUtils.contains(x.getArtifactInfo().getVersion(), "android"))
            .collect(Collectors.toList());

    // group by GAV
    Map<Pair<String, String>, List<SigTestDBDoc>> groupByGa =
        filteredSigTestDocs.stream()
            .collect(
                groupingBy(
                    post ->
                        new ImmutablePair<String, String>(
                            post.getArtifactInfo().getGroupId(),
                            post.getArtifactInfo().getArtifactId())));

    for (Map.Entry<Pair<String, String>, List<SigTestDBDoc>> entry : groupByGa.entrySet()) {

      final Collection<Pair<SigTestDBDoc, SigTestDBDoc>> pairCollection =
          computeSemanticPairs(entry.getValue());
      pairsToComparePerGA.put(entry.getKey(), pairCollection);
    }

    return pairsToComparePerGA;
  }

  private static Collection<Pair<SigTestDBDoc, SigTestDBDoc>> computeSemanticPairs(
      Collection<SigTestDBDoc> sigTestDBDocs) {
    Collection<Pair<SigTestDBDoc, SigTestDBDoc>> pairCollection = new ArrayList<>();

    // all should have the same ga..
    // only compare semantic version
    final Map<Integer, List<SigTestDBDoc>> groupedByMajorVersion =
        sigTestDBDocs.stream()
            .collect(
                groupingBy(
                    x -> {
                      // get the version number
                      String version = x.getArtifactInfo().getVersion();
                      DefaultArtifactVersion defaultArtifactVersion =
                          new DefaultArtifactVersion(version);
                      return defaultArtifactVersion.getMajorVersion();
                    }));

    // do a pairwise comparison for each semdiff set, e.g., 1.0 - 1.9 (indicated by the first
    // value)
    for (Map.Entry<Integer, List<SigTestDBDoc>> entry : groupedByMajorVersion.entrySet()) {

      // sort the version
      final List<SigTestDBDoc> value = entry.getValue();
      final List<SigTestDBDoc> sortedByVersion =
          value.stream()
              .sorted(
                  ((o1, o2) -> {
                    DefaultArtifactVersion v1 =
                        new DefaultArtifactVersion(o1.getArtifactInfo().getVersion());
                    DefaultArtifactVersion v2 =
                        new DefaultArtifactVersion(o2.getArtifactInfo().getVersion());
                    return v1.compareTo(v2);
                  }))
              .collect(Collectors.toList());

      // run sigcheck pairwise
      if (sortedByVersion.size() < 2) {
        LOGGER.error("Cannot compare only 1 version");
        continue;
      }

      for (int i = 0; i < sortedByVersion.size() - 1; i++) {
        final ImmutablePair<SigTestDBDoc, SigTestDBDoc> sigTestDBDocSigTestDBDocImmutablePair =
            new ImmutablePair<>(sortedByVersion.get(i), sortedByVersion.get(i + 1));
        pairCollection.add(sigTestDBDocSigTestDBDocImmutablePair);
      }
    }
    return pairCollection;
  }
}
